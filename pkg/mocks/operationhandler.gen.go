// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-core-go/pkg/api/operation"
	"github.com/trustbloc/sidetree-core-go/pkg/api/protocol"
)

type OperationHandler struct {
	PrepareTxnFilesStub        func([]*operation.QueuedOperation) (string, []*operation.Reference, error)
	prepareTxnFilesMutex       sync.RWMutex
	prepareTxnFilesArgsForCall []struct {
		arg1 []*operation.QueuedOperation
	}
	prepareTxnFilesReturns struct {
		result1 string
		result2 []*operation.Reference
		result3 error
	}
	prepareTxnFilesReturnsOnCall map[int]struct {
		result1 string
		result2 []*operation.Reference
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OperationHandler) PrepareTxnFiles(arg1 []*operation.QueuedOperation) (string, []*operation.Reference, error) {
	var arg1Copy []*operation.QueuedOperation
	if arg1 != nil {
		arg1Copy = make([]*operation.QueuedOperation, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.prepareTxnFilesMutex.Lock()
	ret, specificReturn := fake.prepareTxnFilesReturnsOnCall[len(fake.prepareTxnFilesArgsForCall)]
	fake.prepareTxnFilesArgsForCall = append(fake.prepareTxnFilesArgsForCall, struct {
		arg1 []*operation.QueuedOperation
	}{arg1Copy})
	fake.recordInvocation("PrepareTxnFiles", []interface{}{arg1Copy})
	fake.prepareTxnFilesMutex.Unlock()
	if fake.PrepareTxnFilesStub != nil {
		return fake.PrepareTxnFilesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.prepareTxnFilesReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *OperationHandler) PrepareTxnFilesCallCount() int {
	fake.prepareTxnFilesMutex.RLock()
	defer fake.prepareTxnFilesMutex.RUnlock()
	return len(fake.prepareTxnFilesArgsForCall)
}

func (fake *OperationHandler) PrepareTxnFilesCalls(stub func([]*operation.QueuedOperation) (string, []*operation.Reference, error)) {
	fake.prepareTxnFilesMutex.Lock()
	defer fake.prepareTxnFilesMutex.Unlock()
	fake.PrepareTxnFilesStub = stub
}

func (fake *OperationHandler) PrepareTxnFilesArgsForCall(i int) []*operation.QueuedOperation {
	fake.prepareTxnFilesMutex.RLock()
	defer fake.prepareTxnFilesMutex.RUnlock()
	argsForCall := fake.prepareTxnFilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OperationHandler) PrepareTxnFilesReturns(result1 string, result2 []*operation.Reference, result3 error) {
	fake.prepareTxnFilesMutex.Lock()
	defer fake.prepareTxnFilesMutex.Unlock()
	fake.PrepareTxnFilesStub = nil
	fake.prepareTxnFilesReturns = struct {
		result1 string
		result2 []*operation.Reference
		result3 error
	}{result1, result2, result3}
}

func (fake *OperationHandler) PrepareTxnFilesReturnsOnCall(i int, result1 string, result2 []*operation.Reference, result3 error) {
	fake.prepareTxnFilesMutex.Lock()
	defer fake.prepareTxnFilesMutex.Unlock()
	fake.PrepareTxnFilesStub = nil
	if fake.prepareTxnFilesReturnsOnCall == nil {
		fake.prepareTxnFilesReturnsOnCall = make(map[int]struct {
			result1 string
			result2 []*operation.Reference
			result3 error
		})
	}
	fake.prepareTxnFilesReturnsOnCall[i] = struct {
		result1 string
		result2 []*operation.Reference
		result3 error
	}{result1, result2, result3}
}

func (fake *OperationHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.prepareTxnFilesMutex.RLock()
	defer fake.prepareTxnFilesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OperationHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ protocol.OperationHandler = new(OperationHandler)
